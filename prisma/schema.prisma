generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id             Int              @id @default(autoincrement())
  email          String           @unique
  password       String           @db.VarChar(255)
  createdAt      DateTime         @default(now())
  updatedAt      DateTime?
  deletedAt      DateTime?
  profiles       Profile?
  userHasRoles   UserHasRole[]
  userHasBook    UserHasBook[]
  logUserHasBook LogUserHasBook[]
}

model Role {
  id        Int       @id @default(autoincrement())
  name      String
  createdAt DateTime  @default(now())
  updatedAt DateTime?
  deletedAt DateTime?

  userHasRoles UserHasRole[]
}

model UserHasRole {
  id      Int  @id @default(autoincrement())
  user_id Int
  role_id Int
  user    User @relation(fields: [user_id], references: [id])
  role    Role @relation(fields: [role_id], references: [id])

  @@unique([user_id, role_id])
}

model Profile {
  id        Int       @id @default(autoincrement())
  user_id   Int       @unique
  firstName String    @db.VarChar(255)
  lastName  String    @db.VarChar(255)
  createdAt DateTime  @default(now())
  updatedAt DateTime?
  deletedAt DateTime?
  user      User      @relation(fields: [user_id], references: [id])
}

model StatusRent {
  id        Int       @id @default(autoincrement())
  name      String
  createdAt DateTime  @default(now())
  updatedAt DateTime?
  deletedAt DateTime?

  logUserHasBook LogUserHasBook[]
  Book           Book[]
}

model Book {
  id            Int       @id @default(autoincrement())
  name          String
  statusrent_id Int
  createdAt     DateTime  @default(now())
  updatedAt     DateTime?
  deletedAt     DateTime?

  userHasBook    UserHasBook[]
  logUserHasBook LogUserHasBook[]
  rent           StatusRent       @relation(fields: [statusrent_id], references: [id])
}

model UserHasBook {
  id      Int  @id @default(autoincrement())
  user_id Int
  book_id Int
  user    User @relation(fields: [user_id], references: [id])
  book    Book @relation(fields: [book_id], references: [id])

  @@unique([user_id, book_id])
}

model LogUserHasBook {
  id            Int        @id @default(autoincrement())
  user_id       Int
  book_id       Int
  statusrent_id Int
  createdAt     DateTime  @default(now())
  updatedAt     DateTime?
  deletedAt     DateTime?
  
  user          User       @relation(fields: [user_id], references: [id])
  book          Book       @relation(fields: [book_id], references: [id])
  rent          StatusRent @relation(fields: [statusrent_id], references: [id])
}
